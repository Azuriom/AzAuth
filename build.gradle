plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group 'com.azuriom'
version '1.0.0'

ext {
    isReleaseVersion = !version.endsWith('SNAPSHOT')
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

dependencies {
    api 'com.google.code.gson:gson:2.9.1'
    compileOnlyApi 'org.jetbrains:annotations:23.1.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.1'
}

test {
    useJUnitPlatform()
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = 'AzAuth'
                description = 'A Java implementation of the Azuriom Auth API.'
                url = 'https://github.com/Azuriom/AzAuth'

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id = 'mrmicky'
                        name = 'MrMicky'
                        email = 'git@mrmicky.fr'
                    }
                }

                issueManagement {
                    system = 'GitHub Issues'
                    url = 'https://github.com/Azuriom/AzAuth/issues'
                }

                scm {
                    connection = 'scm:git:https://github.com/Azuriom/AzAuth.git'
                    developerConnection = 'scm:git:git@github.com:Azuriom/AzAuth.git'
                    url = 'https://github.com/Azuriom/AzAuth'
                }
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
            url = isReleaseVersion ? releasesRepoUrl : snapshotsRepoUrl

            credentials {
                username = findProperty('ossrhUsername') ?: System.getenv('SONATYPE_USERNAME')
                password = findProperty('ossrhPassword') ?: System.getenv('SONATYPE_PASSWORD')
            }
        }
    }
}

signing {
    def signingKey = System.getenv('SIGNING_KEY')
    def signingPassword = System.getenv('SIGNING_PASSWORD')

    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
